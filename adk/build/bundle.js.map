{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/util.js","../../src/snake.js","../../src/game.js","../../src/components/Player.svelte","../../src/components/Game.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.3' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export function randFromInterval(min, max){\n    return Math.random() * (max - min) + min;\n}\n\nexport function getKeyRepresentation(key){\n    if(key === 'ArrowLeft') {\n        return '<';\n    } else if(key === 'ArrowRight') {\n        return '>';\n    }\n    return key.toUpperCase();\n}\n\n/** find a pseudo-random spawn position\n * based on location of other players\n */\nexport function getRandomSpawn(canvasWidth, canvasHeight, players) {\n    let minEdgeDist = 100;\n    let minOtherSnakeDist = 100;\n    const MAX_ATTEMPTS = 50;\n\n    let prevSpawns = players.map(p => [p.snake.posX, p.snake.posY]);\n\n    let x,y;\n    let attempts = 0;\n\n    outerLoop:\n    while(attempts++ < MAX_ATTEMPTS){\n        x = randFromInterval(minEdgeDist, canvasWidth-minEdgeDist);\n        y = randFromInterval(minEdgeDist, canvasHeight-minEdgeDist);\n\n        for(const otherSpawn of prevSpawns){            \n            if(Math.sqrt( (x-otherSpawn[0])**2 + (y-otherSpawn[1])**2 ) < minOtherSnakeDist){\n                continue outerLoop;\n            }\n        }\n        break;\n    }\n\n    if(attempts >= MAX_ATTEMPTS){\n        console.warn(`Maximum number of attempts reached to find a spawn for player #${prevSnakes.length+1}.`);\n    }\n    \n    return [x, y, randFromInterval(0, Math.PI)];\n}\n\nexport function distance(x, y, line) {\n    let A = x - line.x0;\n    let B = y - line.y0;\n    let C = line.x1 - line.x0;\n    let D = line.y1 - line.y0;\n\n    let dot = A * C + B * D;\n    let len_sq = C * C + D * D;\n    let param = -1;\n    if (len_sq != 0) //in case of 0 length line\n        param = dot / len_sq;\n\n    let xx, yy;\n\n    if (param < 0) {\n        xx = line.x0;\n        yy = line.y0;\n    } else if (param > 1) {\n        xx = line.x1;\n        yy = line.y1;\n    } else {\n        xx = line.x0 + param * C;\n        yy = line.y0 + param * D;\n    }\n\n    let dx = x - xx;\n    let dy = y - yy;\n    return Math.sqrt(dx * dx + dy * dy);\n}","import { distance } from './util.js';\n\nclass Line {\n    constructor(x0, y0, x1, y1) {\n        this.x0 = x0;\n        this.y0 = y0;\n        this.x1 = x1;\n        this.y1 = y1;\n    }\n}\n\nexport default class Snake extends Path2D{\n    constructor(posX, posY, ang) {\n        super();\n\n        this.seed = Math.random();\n        this.posX = posX;\n        this.posY = posY;\n        this.ang = ang;\n        this.angBeforeSegmentStart = this.ang;\n\n        this.MAX_ROTATE_BEFORE_NEW_HITLINE = Math.PI * 2 / 10; //10 segments per circle //TODO: make this global variable\n        this.hitlines = [ new Line(this.posX, this.posY, this.posX, this.posY) ]; //end coords will be continuously updated\n\n        this.turningLeft = false;\n        this.turningRight = false;\n\n        this.speed = .115;\n        this.rotateAng = Math.PI / (360*2);\n        this.lineWidth = 2.5;\n    }\n\n    updatePosition(dt, freezeTime) {\n        let oldPos = [this.posX, this.posY];\n\n        // UPDATE ANGLE\n        if(this.turningLeft != this.turningRight){ //currently turning\n            if( \n                this.ang - this.angBeforeSegmentStart == 0 || // new turn\n                Math.abs(this.ang - this.angBeforeSegmentStart) > this.MAX_ROTATE_BEFORE_NEW_HITLINE // long turn -> new hitline\n            ){ this.createNewHitline(); }\n            \n            // update the snake's angle:\n            let fct = this.turningRight ? -1 : 1;\n            this.ang += fct * this.rotateAng * dt;\n        }\n\n        // UPDATE POSITION\n        this.posX += dt * this.speed * Math.sin(this.ang);\n        this.posY += dt * this.speed * Math.cos(this.ang);\n\n        // UPDATE HITBOXES\n        // modify the end coordinate of the current (last) hitline:\n        this.hitlines[this.hitlines.length - 1].x1 = this.posX;\n        this.hitlines[this.hitlines.length - 1].y1 = this.posY;\n\n        if(this.turningLeft == this.turningRight && this.angBeforeSegmentStart != this.ang){ // just stopped turning\n            this.angBeforeSegmentStart = this.ang;\n            // add a new hitline, now that the line is straight again.\n            // otherwise, hitline won't line up with the snake after it stopped turning\n            this.hitlines.push(new Line(this.posX, this.posY, this.posX, this.posY));\n        }\n\n        this.moveTo(...oldPos);\n        this.lineTo(this.posX, this.posY);\n    }\n\n    collidesWith(otherSnake){ // doesn't work at high speeds!\n        // TODO: fix this by instead checking for intersection\n        // between the latest hitline of this snake and the other\n        // sections, instead of comparing the current position\n        let coll_hitlines = otherSnake.hitlines;\n\n        //TODO: fix this comparison (it works, but is ugly)\n        if(otherSnake.seed == this.seed){\n            // testing snake collisions with itseslf\n            coll_hitlines = coll_hitlines.slice(0, -5);\n        }\n\n        for(const hl of coll_hitlines){\n            if(distance(this.posX, this.posY, hl) < otherSnake.lineWidth/2){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    outOfBounds(canvasWidth, canvasHeight) {\n        // lineWidth multiplied by 1/3 to make hit detection more forgiving\n        if( \n            this.posX < this.lineWidth/3 || this.posX > canvasWidth - this.lineWidth/3 ||\n            this.posY < this.lineWidth/3 || this.posY > canvasHeight - this.lineWidth/3\n        ) { return true; }\n        return false;\n    }\n\n    createNewHitline(){\n        /** save angle to keep track of when a new segment is needed. \n         * Once the new angle becomes too different to angBeforeSegmentStart,\n         * a new hitline will be created. */\n        this.angBeforeSegmentStart = this.ang;\n\n        // Set the end coordinates of the last hitline to the current position:\n        this.hitlines[this.hitlines.length - 1].x1 = this.posX;\n        this.hitlines[this.hitlines.length - 1].y1 = this.posY;\n\n        // Add a new hitline, starting at the current coordinates.\n        this.hitlines.push(new Line(this.posX, this.posY, this.posX, this.posY));\n    }\n}","import Snake from \"./snake.js\";\nimport { getRandomSpawn } from \"./util.js\";\n\nexport default class Game {\n    constructor(ctx, players) {\n        this.roundsPlayed = 0;\n        this.roundActive = false;\n        this.players = players;\n        this.winScore = (players.length-1) * 10; // first to 10 round\n\n        this.ctx = ctx;\n        this.canvasWidth = ctx.canvas.clientWidth;\n        this.canvasHeight = ctx.canvas.clientHeight;\n\n        document.addEventListener('keydown', e => {\n            if(e.key === ' '){ // spacebar\n                this.startRound();\n            }\n\n            for (const player of this.players.filter(p => p.alive)){\n                if (e.key === player.keyL){\n                    player.snake.turningLeft = true;\n                } else if (e.key === player.keyR){\n                    player.snake.turningRight = true;\n                }\n            }\n        });\n        document.addEventListener('keyup', e => {\n            for (const player of this.players.filter(p => p.alive)){\n                if (e.key === player.keyL){\n                    player.snake.turningLeft = false;\n                } else if (e.key === player.keyR){\n                    player.snake.turningRight = false;\n                }\n            }\n        });\n\n        this.startRound();\n    }\n\n    startRound() {\n        if(this.roundActive){\n            console.log(\"Game is already active\");\n            return;\n        }\n\n        this.roundActive = true;\n        this.roundsPlayed++;\n        console.log(\"Started round \"+this.roundsPlayed);\n\n        this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        this.players.forEach((p, i) => {\n            let initialPos = getRandomSpawn(\n                this.canvasWidth, \n                this.canvasHeight, \n                this.players.slice(0,i) // only consider players that already have a snake\n            );\n            p['snake'] = new Snake(...initialPos);\n            p['pointsReceived'] = 0;\n            p['alive'] = true;\n        });\n\n        this.players.forEach(p => {\n            p.snake.lineTo(p.snake.posX, p.snake.posY);\n            this.ctx.lineWidth = 6;\n            this.ctx.strokeStyle = p.color;\n            this.ctx.stroke(p.snake);\n        });\n        window.setTimeout(() => {\n            this.lastUpdate = performance.now();\n            this.gameLoop = window.requestAnimationFrame((ts) => this.update(ts));\n        }, 1500);\n    }\n\n    endRound() {\n        this.roundActive = false;\n        console.log('round over');\n        cancelAnimationFrame(this.gameLoop);\n\n\n        this.ctx.font = '20px Arial';\n        this.ctx.fillStyle = \"black\";\n        \n        this.players\n        .sort((a, b) => b.score - a.score)\n        .forEach((p, i) => {\n            let msg = `${p.name}: ${p.score}` \n                + (p.pointsReceived > 0 ? ` (+${p.pointsReceived})` : '');\n            this.ctx.fillText(msg, 10, (i+1)*30);\n        });\n\n        this.ctx.fillText(\"Press [space] to continue\", 10, this.canvasHeight-20);\n    }\n\n    /** remove a player from the current round,\n     * award every other surviving snake a point,\n     * check if the round is over. */\n    killPlayer(p) {\n        p.alive = false;\n        \n        this.players.filter(p => p.alive).forEach(p => {\n            p.score++;\n            p.pointsReceived++;\n        });\n\n        if( this.players.filter(p => p.alive).length <= 1 ) {\n            this.endRound();\n            return;\n        }\n    }\n\n    update(now){\n\t\tconst dt = now - this.lastUpdate;\n        this.lastUpdate = now;\n\n        // Update player positions and draw them:\n        for (const player of this.players.filter(p => p.alive)){\n            player.snake.updatePosition(dt);\n\n            this.ctx.lineWidth = player.snake.lineWidth;\n            this.ctx.strokeStyle = player.color;\n            this.ctx.stroke(player.snake);\n\n            // Check if any player went out of bounds\n            if (player.snake.outOfBounds(this.canvasWidth, this.canvasHeight)){\n                this.killPlayer(player);\n                continue;\n            }\n\n            // Test for collisions\n            for(const otherPlayer of this.players){ //otherSnake <- snake to which collisions are compared\n                if( player.snake.collidesWith(otherPlayer.snake) ){\n                    this.killPlayer(player);\n                    break;\n                }\n            }\n        }\n\n        if(this.roundActive){ //i.e. more than 1 player still alive\n            this.gameLoop = window.requestAnimationFrame((ts) => this.update(ts));\n        }\n    }\n}","<script>\n    import { createEventDispatcher } from \"svelte\";\n    import { getKeyRepresentation } from \"../util\";\n    export let player;\n    export let gameActive;\n\n    const dispatch = createEventDispatcher();\n</script>\n\n<div class=\"text-xl flex\">\n    <input type=\"color\" bind:value={player.color} disabled={gameActive}>\n    <input type=\"text\" class=\"player-name grow\" \n            bind:value={player.name}\n            disabled={gameActive}\n            size=\"1\" maxlength=\"15\">\n    <div class=\"flex items-center text-center font-bold font-mono\">\n        <div class=\"w-6\">{getKeyRepresentation(player.keyL)}</div>\n        <div class=\"w-6\">{getKeyRepresentation(player.keyR)}</div>\n        <button\n            class=\"rm-btn text-gray-500 border-gray-500\n            hover:text-gray-600 hover:border-gray-600\n            transition duration-75 rounded-full\"\n            on:click={() => dispatch('remove', player)}\n          disabled={gameActive}\n        >×</button>\n    </div>\n</div>\n\n<style>\n    input[type=\"color\"]{\n        height: 32px;\n        width: 32px;\n        border: none;\n        border-radius: 3px;\n        padding: 0;\n        cursor: pointer;\n        /* -webkit-appearance: none; */\n    }\n\n    input[type=\"color\"]::-webkit-color-swatch-wrapper{\n        padding: 0; \n    }\n    input[type=\"color\"]::-webkit-color-swatch{\n        border: none;\n        border-radius: 3px;\n    }\n\n    .player-name{\n        flex-grow: 1;\n        margin-left: 4px;\n        border: none;\n        cursor: pointer;\n        transition: .075s;\n    }\n    .player-name:disabled{\n        color: inherit;\n        background: inherit;\n    }\n    input:disabled{\n        cursor: default;\n    }\n    .rm-btn{\n        width: 22px;\n        height: 22px;\n        line-height: 20px;\n    }\n</style>","<script>\n\t/**\n\t * TODOS\n\t * fix collision detection by checking for line intersections\n\t * add high contrast mode\n\t * add more settings (rotation angle, speed)\n\t * add mode that incrementally speeds up snakes each round\n\t * add FPS counter\n\t * improve scoreboard between rounds, blur background\n\t * make player OOP\n\t * make controls customizable\n\t * disable buttons while game/round is active\n\t*/\n\timport { onMount } from \"svelte\";\n\timport Game from \"../game\";\n\timport Player from \"./Player.svelte\";\n\n\tconst MAX_PLAYERS = 6;\n\tconst CANVAS_WIDTH = 660;\n\tconst CANVAS_HEIGHT = 560;\n\n\tlet ctx, game;\n\tlet gameActive = false;\n\n\texport let defaultPlayers = [];\n\n\tlet players = [];\n\n\tfunction addPlayer(){\n\t\tlet id = players.length == 0 ? 1 : Math.max(...players.map(p => p.id)) + 1;\n\t\tlet name = `Player ${id}`;\n\t\tlet color = '#' + ((1<<24)*Math.random() | 0).toString(16); //https://stackoverflow.com/a/5365036/\n\t\tlet keyL = '_';\n\t\tlet keyR = '_';\n\t\tlet score = 0;\n\n\t\tif( id <= defaultPlayers.length ) {\n\t\t\tcolor = defaultPlayers[id-1]['color'];\n\t\t\tkeyL = defaultPlayers[id-1]['keyL'];\n\t\t\tkeyR = defaultPlayers[id-1]['keyR'];\n\t\t}\n\t\tplayers = [...players, { id, name, color, keyL, keyR, score }];\n\t}\n\n\tfunction removePlayer(player) {\n\t\tplayers = players.filter(p => p.id !== player.id)\n\t}\n\n\tfunction startGame(){\n\t\tgame = new Game(ctx, players);\n\t\tgameActive = true;\n\t}\n\n\tonMount(() => {\n\t\taddPlayer();\n\t\taddPlayer();\n\t\t\n\t\tctx = document.getElementById('board').getContext('2d');\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\t});\n</script>\n\n<div class=\"flex\">\n\t<canvas \n\t\t\twidth={CANVAS_WIDTH*window.devicePixelRatio} \n\t\t\theight={CANVAS_HEIGHT*window.devicePixelRatio}\n\t\t\tstyle=\"width: {CANVAS_WIDTH}px; height: {CANVAS_HEIGHT}px;\"\n\t\t\tid=\"board\" \n\t\t\tclass=\"box-content border-2 border-current\"></canvas>\n\n\t<div class=\"ml-5 grow flex justify-between flex-col\">\n\t\t<div class=\"space-y-2\">\n\t\t\t<div class=\"flex justify-end\">\n\t\t\t\t<button class=\"border-2 border-current px-1\" on:click={addPlayer} disabled={gameActive || players.length >= MAX_PLAYERS}>Add Player</button>\n\t\t\t</div>\n\n\t\t\t{#each players as player (player.id)}\n\t\t\t<Player {player} {gameActive}\n\t\t\t\ton:remove={e => removePlayer(e.detail)}\n\t\t\t/>\n\t\t\t{/each}\n\t\t</div>\n\n\t\t<div>\n\t\t\t<button class=\"border-2 border-current w-full\" disabled>More Options (coming soon™)</button>\n\t\t\t<button class=\"w-full mt-2 transition border-2\n\t\t\t\tbg-blue-700\n\t\t\t\tborder-blue-700\n\t\t\t\thover:shadow-sm hover:shadow-blue-700\n\t\t\t\tactive:bg-blue-800 active:border-blue-800\n\t\t\t\tdisabled:shadow-none disabled:bg-transparent disabled:border-current\n\t\t\t\tpy-2 text-lg text-white\" on:click={startGame} disabled={gameActive || players.length < 2}>{gameActive ? \"Game is Active\" : \"Start Game\"}</button>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t.start-btn{\n\t\ttext-shadow: 0 2px 4px rgba(0,0,0,0.15);\n\t}\n</style>","<script>\n    import Game from './components/Game.svelte';\n    \n    let defaultPlayers = [\n\t\t{ color: '#F8CA00', keyL: 'q', keyR: 'w' },\n\t\t{ color: '#1AD2F2', keyL: 'ArrowLeft', keyR: 'ArrowRight' },\n\t\t{ color: '#FD0123', keyL: 'x', keyR: 'c' },\n\t\t{ color: '#2A2A2A', keyL: 'i', keyR: 'o' },\n\t];\n</script>\n\n<div class=\"flex items-center max-w-5xl m-auto h-screen\">\n\t<div class=\"bg-white grow px-8 py-8 shadow-2xl rounded-xl\">\n\t\t<h1 class=\"text-5xl mb-8 font-serif\">Achtung, die Kurve!</h1>\n\t\t<Game {defaultPlayers}/>\n\t</div>\t\n</div>\n\n<style lang=\"postcss\" global>\n\t@font-face {\n\t\tfont-family: EB Garamond;\n\t\tsrc: url(/fonts/EBGaramond/EBGaramond-SemiBold.ttf);\n\t}\n\n\t@tailwind base;\n\t@tailwind components;\n\t@tailwind utilities;\n\n\t/* *{\n\t\toutline: 1px solid grey;\n\t} */\n\n</style>","import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","outro_and_destroy_block","lookup","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","randFromInterval","min","max","Math","random","getKeyRepresentation","toUpperCase","distance","x","y","line","xx","yy","A","x0","B","y0","C","x1","D","y1","len_sq","param","dx","dy","sqrt","Line","constructor","Snake","Path2D","posX","posY","ang","super","seed","angBeforeSegmentStart","MAX_ROTATE_BEFORE_NEW_HITLINE","PI","hitlines","turningLeft","turningRight","speed","rotateAng","lineWidth","updatePosition","dt","freezeTime","oldPos","abs","createNewHitline","fct","sin","cos","moveTo","lineTo","collidesWith","otherSnake","coll_hitlines","hl","outOfBounds","canvasWidth","canvasHeight","Game","players","roundsPlayed","roundActive","winScore","canvas","clientWidth","clientHeight","startRound","player","alive","keyL","snake","keyR","console","log","clearRect","initialPos","minEdgeDist","prevSpawns","attempts","outerLoop","otherSpawn","warn","prevSnakes","getRandomSpawn","strokeStyle","color","stroke","window","setTimeout","lastUpdate","performance","now","gameLoop","requestAnimationFrame","ts","endRound","cancelAnimationFrame","font","fillStyle","sort","score","msg","pointsReceived","fillText","killPlayer","otherPlayer","gameActive","dispatch","id","CANVAS_WIDTH","devicePixelRatio","CANVAS_HEIGHT","MAX_PLAYERS","r","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","get","set","will_move","did_move","first","new_block","old_block","new_key","old_key","defaultPlayers","addPlayer","toString","removePlayer","getElementById","getContext","lineCap","lineJoin","scale","body"],"mappings":"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"}